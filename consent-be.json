{
  "openapi": "3.0.0",
  "info": {
    "title": "API Consents - Open Banking Hong Kong",
    "description": "Consent API deals with the creation, consultation and revocation of consents as prescribed by HKMA Open API specification. ",
    "version": "0.0.1",
    "contact": {
      "name": "WeLab OpenBanking team",
      "email": "TBD@welab.com",
      "url": "https://welab.com"
    }
  },
  "servers": [
    {
      "url": "https://api.welab.com.br/open-banking/consents/v1",
      "description": "Production Server"
    },
    {
      "url": "https://sandbox.api.welab.com.br/open-banking/consents/v1",
      "description": "Sandbox Server"
    }
  ],
  "tags": [
    {
      "name": "Consents",
      "description": "Operations for the creation, consultation and revocation of the consent given by the WeLab Banking Customer."
    }
  ],
  "paths": {
    "/account-consents": {
      "post": {
        "tags": [
          "Consents"
        ],
        "summary": "Create a new consent request.",
        "operationId": "consentsPostConsents",
        "description": "Enables the TSP to request WeLab to create an account-consents resource. ",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/xFapiAuthDate"
          },
          {
            "$ref": "#/components/parameters/xFapiCustomerIpAddress"
          },
          {
            "$ref": "#/components/parameters/xFapiInteractionId"
          },
          {
            "$ref": "#/components/parameters/xCustomerUserAgent"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConsent"
              }
            }
          },
          "description": "Payload for consent creation.",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201ConsentsCreated"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "405": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "consents"
            ]
          }
        ]
      }
    },
  
    "/account-consents/{consentId}": {
      "put": {
        "tags": [
          "Consents"
        ],
        "summary": "Extend an existing consent request.",
        "operationId": "consentsPutConsents",
        "description": "Enables the TSP to request WeLab to create an account-consents resource. ",
        "parameters": [
          {
            "$ref": "#/components/parameters/consentId"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/xFapiAuthDate"
          },
          {
            "$ref": "#/components/parameters/xFapiCustomerIpAddress"
          },
          {
            "$ref": "#/components/parameters/xFapiInteractionId"
          },
          {
            "$ref": "#/components/parameters/xCustomerUserAgent"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConsent"
              }
            }
          },
          "description": "Payload for consent creation.",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201ConsentsCreated"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "405": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "consents"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Consents"
        ],
        "summary": "Obtain details of consent identified by consentId.",
        "operationId": "consentsGetConsentsConsentId",
        "description": "Method for obtaining details of consent identified by consentId.",
        "parameters": [
          {
            "$ref": "#/components/parameters/consentId"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/xFapiAuthDate"
          },
          {
            "$ref": "#/components/parameters/xFapiCustomerIpAddress"
          },
          {
            "$ref": "#/components/parameters/xFapiInteractionId"
          },
          {
            "$ref": "#/components/parameters/xCustomerUserAgent"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ConsentsConsentIdRead"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "405": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "description": "Erro inesperado.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "consents"
            ]
          }
        ]
      },
     
      "delete": {
        "tags": [
          "Consents"
        ],
        "summary": "Delete / Revoke consent identified by consentId",
        "operationId": "consentsDeleteConsentsConsentId",
        "description": "Method to delete / revoke the consent identified by consentId.",
        "parameters": [
          {
            "$ref": "#/components/parameters/consentId"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/xFapiAuthDate"
          },
          {
            "$ref": "#/components/parameters/xFapiCustomerIpAddress"
          },
          {
            "$ref": "#/components/parameters/xFapiInteractionId"
          },
          {
            "$ref": "#/components/parameters/xCustomerUserAgent"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204ConsentsConsentIdDeleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "405": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Security": [
              "consents"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Links": {
        "type": "object",
        "description": "References to other requested API dec.",
        "required": [
          "self"
        ],
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "maxLength": 2000,
            "description": "Full URI that generated the current response.",
            "example": "https://api.welab.com/open-banking/api/v1/resource",
            "pattern": "^(https?:\\/\\/)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)$"
          },
          "first": {
            "type": "string",
            "format": "uri",
            "maxLength": 2000,
            "description": "URI from the first page that originated this list of results. Restriction - Required when not the first page of the response",
            "example": "https://api.welab.com/open-banking/api/v1/resource",
            "pattern": "^(https?:\\/\\/)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)$"
          },
          "prev": {
            "type": "string",
            "format": "uri",
            "maxLength": 2000,
            "description": "URI from the previous page of this list of results. Restriction - tRequired when not the first page of the response",
            "example": "https://api.welab.com/open-banking/api/v1/resource",
            "pattern": "^(https?:\\/\\/)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)$"
          },
          "next": {
            "type": "string",
            "format": "uri",
            "maxLength": 2000,
            "description": "uri from the next page of this result list. Restriction - Required when not the last page of the answer",
            "example": "https://api.welab.com/open-banking/api/v1/resource",
            "pattern": "^(https?:\\/\\/)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)$"
          },
          "last": {
            "type": "string",
            "format": "uri",
            "maxLength": 2000,
            "description": "URI from the last page of this result list. Restriction - Required when not the last page of the answer",
            "example": "https://api.welab.com/open-banking/api/v1/resource",
            "pattern": "^(https?:\\/\\/)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)$"
          }
        },
        "additionalProperties": false
      },
      "Meta": {
        "type": "object",
        "description": "Meta information regarding the requested API.",
        "required": [
          "totalRecords",
          "totalPages",
          "requestDateTime"
        ],
        "properties": {
          "totalRecords": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of records in profitor and loss",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of pages in the result",
            "example": 1
          },
          "requestDateTime": {
            "description": "Date and time of the query, according to specification RFC-3339, UTC format.",
            "type": "string",
            "maxLength": 20,
            "format": "date-time",
            "example": "2021-05-21T08:30:00Z"
          }
        },
        "additionalProperties": false
      },
      "CreateConsent": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "permissions",
              "loggedUser",
              "expirationDateTime"
            ],
            "properties": {
              "loggedUser": {
                "$ref": "#/components/schemas/LoggedUser"
              },
              "businessEntity": {
                "$ref": "#/components/schemas/BusinessEntity"
              },
              "permissions": {
                  "type": "array",
                  "maxItems": 30,
                  "minItems": 1,
                  "description": "Specifies the types of apis access permissions in the scope of HKMA Open API Specification, according to the consent blocks provided by the user and required to access each endpoint of the APIs.",
                  "items": {
                    "type": "string",
                    "enum": [
                      "READACCOUNTAVAILABILITY",
                      "READACCOUNTSTATUS",
                      "READACCOUNTBALANCE",
                      "READACCOUNTTRANSACTION"
                      
                    ]
                  },
                  "example": [
                    "READACCOUNTAVAILABILITY",
                    "READACCOUNTSTATUS"
                  ]
                },
              "expirationDateTime": {
                "description": "Permission expiration date and time. Mandatory, reflects the expiration date of the consent. A string with date and time according to rfc-3339 specification, always using UTC timezone(UTC time format).",
                "type": "string",
                "maxLength": 20,
                "format": "date-time",
                "example": "2021-05-21T08:30:00Z"
              },
              "transactionFromDateTime": {
                "description": "Date and time of the initial transaction. If not completed, the transaction will have the date open and the date is returned with the first transaction available. A string with date and time according to rfc-3339 specification, always using UTC timezone(UTC time format).",
                "type": "string",
                "maxLength": 20,
                "format": "date-time",
                "example": "2021-01-01T00:00:00Z"
              },
              "transactionToDateTime": {
                "description": "Date and time end of transaction. If not completed, the transaction will have the date open and the date will be returned with the last available transaction. A string with date and time according to rfc-3339 specification, always using UTC timezone(UTC time format).",
                "type": "string",
                "maxLength": 20,
                "format": "date-time",
                "example": "2021-02-01T23:59:59Z"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      "ResponseConsent": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "consentId",
              "creationDateTime",
              "status",
              "statusUpdateDateTime",
              "permissions",
              "expirationDateTime"
            ],
            "properties": {
              "consentId": {
                "description": "Unique reference of consent object in the bank.",
                "type": "string",
                "pattern": "^urn:[a-zA-Z0-9][a-zA-Z0-9-]{0,31}:[a-zA-Z0-9()+,\\-.:=@;$_!*'%\\/?#]+$",
                "maxLength": 256,
                "example": "urn:welabex:C1DD33123"
              },
              "creationDateTime": {
                "description": "Date and time of consent resource creation(ISODateTime format).",
                "type": "string",
                "format": "date-time",
                "example": "2021-05-21T08:30:00Z",
                "maxLength": 20
              },
              "status": {
                "description": "Specifies the status of consent resource in code form.",
                "type": "string",
                "enum": [
                  "AUTHORISED",
                  "PENDINGAUTHORISE",
                  "REJECTED",
                  "REVOKED"
                ],
                "example": "PENDINGAUTHORISE"
              },
              "statusUpdateDateTime": {
                "description": "Date and time the resource was updated. A string with date and time according to rfc-3339 specification, always using ISODateTime format(ISODateTime format).",
                "type": "string",
                "format": "date-time",
                "example": "2021-05-21T08:30:00Z",
                "maxLength": 20
              },
              "permissions": {
                "type": "array",
                "maxItems": 30,
                "minItems": 1,
                "description": "Specifies the types of apis access permissions in the scope of HKMA Open API Specification, according to the consent blocks provided by the user and required to access each endpoint of the APIs.",
                "items": {
                  "type": "string",
                  "enum": [
                    "READACCOUNTAVAILABILITY",
                    "READACCOUNTSTATUS",
                    "READACCOUNTBALANCE",
                    "READACCOUNTTRANSACTION"
                    
                  ]
                },
                "example": [
                  "READACCOUNTAVAILABILITY",
                  "READACCOUNTSTATUS"
                ]
              },
              "expirationDateTime": {
                "description": "Specified expiration date and time of the permissions in ISODateTime format (open ended if blank).",
                "type": "string",
                "format": "date-time",
                "example": "2021-05-21T08:30:00Z",
                "maxLength": 20
              },
              "transactionFromDateTime": {
                "description": "Specified filtering start date and time of the transaction event in ISODateTime format(open-ended if blank).",
                "type": "string",
                "format": "date-time",
                "example": "2021-01-01T00:00:00Z",
                "maxLength": 20
              },
              "transactionToDateTime": {
                "description": "Specified filtering start date and time of the transaction event in ISODateTime format(open-ended if blank)",
                "type": "string",
                "format": "date-time",
                "example": "2021-02-01T23:59:59Z",
                "maxLength": 20
              }
            },
            "additionalProperties": false
          },
          "links": {
            "$ref": "#/components/schemas/Links"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        },
        "additionalProperties": false
      },
      "ResponseError": {
        "type": "object",
        "required": [
          "errors"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "minItems": 1,
            "maxItems": 13,
            "items": {
              "type": "object",
              "required": [
                "code",
                "title",
                "detail"
              ],
              "properties": {
                "code": {
                  "description": "Endpoint-specific error code",
                  "type": "string",
                  "pattern": "[\\w\\W\\s]*",
                  "maxLength": 255
                },
                "title": {
                  "description": "Humanreadable title of this specific error",
                  "type": "string",
                  "pattern": "[\\w\\W\\s]*",
                  "maxLength": 255
                },
                "detail": {
                  "description": "Human readable description of this specific error",
                  "type": "string",
                  "pattern": "[\\w\\W\\s]*",
                  "maxLength": 2048
                }
              },
              "additionalProperties": false
            }
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        },
        "additionalProperties": false
      },
      "LoggedUser": {
        "type": "object",
        "description": "User (natural person) who is logged into the receiving institution and who will initiate the consent process for data sharing.",
        "additionalProperties": false,
        "required": [
          "document"
        ],
        "properties": {
          "document": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "identification",
              "rel"
            ],
            "properties": {
              "identification": {
                "type": "string",
                "maxLength": 11,
                "description": "User's official ID number.",
                "example": "11111111111",
                "pattern": "^\\d{11}$"
              },
              "rel": {
                "type": "string",
                "maxLength": 3,
                "description": "Type of the user's official ID.",
                "example": "CPF",
                "pattern": "^[A-Z]{3}$"
              }
            }
          }
        }
      },
      "BusinessEntity": {
        "type": "object",
        "description": "Holder, legal entity to whom the data that is the subject of sharing refer.",
        "additionalProperties": false,
        "required": [
          "document"
        ],
        "properties": {
          "document": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "identification",
              "rel"
            ],
            "properties": {
              "identification": {
                "type": "string",
                "maxLength": 14,
                "description": "Official identification document number of the legal entity holder.",
                "example": "11111111111111",
                "pattern": "^\\d{14}$"
              },
              "rel": {
                "type": "string",
                "maxLength": 4,
                "description": "Type of official identification document of the legal entity holder.",
                "example": "CNPJ",
                "pattern": "^[A-Z]{4}$"
              }
            }
          }
        }
      }
    },
    "parameters": {
      "consentId": {
        "name": "consentId",
        "in": "path",
        "description": "Unique reference of consent object in the bank.",
      "required": true,
        "schema": {
          "type": "string",
          "pattern": "^urn:[a-zA-Z0-9][a-zA-Z0-9-]{0,31}:[a-zA-Z0-9()+,\\-.:=@;$_!*'%\\/?#]+$",
          "maxLength": 256
        }
      },
      "Authorization": {
        "name": "Authorization",
        "in": "header",
        "description": "Default HTTP header. Allows credentials to be provided depending on the type of resource requested",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "[\\w\\W\\s]*",
          "maxLength": 2048
        }
      },
      "xCustomerUserAgent": {
        "name": "x-customer-user-agent",
        "in": "header",
        "description": "Indicates the user-agent that the user uses.",
        "required": false,
        "schema": {
          "type": "string",
          "pattern": "[\\w\\W\\s]*",
          "minLength": 1,
          "maxLength": 100
        }
      },
      "xFapiAuthDate": {
        "name": "x-fapi-auth-date",
        "in": "header",
        "description": "Date the user last logos with the receiver. Represented according to [RFC7231](https://tools.ietf.org/html/rfc7231). Example: Sun, 10 Sep 2017 19:43:31 UTC",
        "required": false,
        "schema": {
          "type": "string",
          "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$",
          "minLength": 29,
          "maxLength": 29
        }
      },
      "xFapiCustomerIpAddress": {
        "name": "x-fapi-customer-ip-address",
        "in": "header",
        "description": "The user's IP address if it is currently logged in with the receiver.",
        "required": false,
        "schema": {
          "type": "string",
          "pattern": "[\\w\\W\\s]*",
          "minLength": 1,
          "maxLength": 100
        }
      },
      "xFapiInteractionId": {
        "name": "x-fapi-interaction-id",
        "in": "header",
        "description": "A UID [RFC4122](https://tools.ietf.org/html/rfc4122) used as a correlation ID. If supplied, the transmitter must \"play\" this value in the response header.",
        "required": false,
        "schema": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-]{0,99}$",
          "minLength": 1,
          "maxLength": 100
        }
      }
    },
    "securitySchemes": {
      "OAuth2Security": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://authserver.example/token",
            "scopes": {
              "consents": "Criação do consentimento."
            }
          }
        }
      }
    },
    "responses": {
      "UnsupportedMediaType": {
        "description": "The payload format is not a supported format.",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ResponseError"
            }
          }
        }
      },
      "BadRequest": {
        "description": "The request was malformed, omitting mandatory attributes, either on payload or through attributes in the URL.",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ResponseError"
            }
          }
        }
      },
      "Forbidden": {
        "description": "The token has incorrect scope or a security policy has been violated",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ResponseError"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "An error occurred at the API gateway or microservice",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ResponseError"
            }
          }
        }
      },
      "MethodNotAllowed": {
        "description": "The consumer tried to access the resource with an unsupported method",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ResponseError"
            }
          }
        }
      },
      "NotAcceptable": {
        "description": "The request contained a different Accept header than the allowed media types or a character set other than UTF-8",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ResponseError"
            }
          }
        }
      },
      "NotFound": {
        "description": "The requested resource does not exist or has not been implemented",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ResponseError"
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "The operation was declined because many requests were made within a certain period or the global limit of competing requests was reached",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ResponseError"
            }
          }
        }
      },
      "UnprocessableEntity": {
        "description": "The request syntax is correct, but the statements present could not be processed.",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ResponseError"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Missing/invalid authentication header or invalid token",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ResponseError"
            }
          }
        }
      },
      "201ConsentsCreated": {
        "description": "Successful consent.",
        "headers": {
          "x-fapi-interaction-id": {
            "description": "A UID [RFC4122](https://tools.ietf.org/html/rfc4122) used as a correlation ID.  nIf supplied, the transmitter must \"play\" this value in the response header.",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-]{0,99}$",
              "minLength": 1,
              "maxLength": 100,
              "example": "73cac523-d3ae-2289-b106-330a6218710d"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ResponseConsent"
            }
          }
        }
      },
      "200ConsentsConsentIdRead": {
        "description": "Consent consulted successfully.",
        "headers": {
          "x-fapi-interaction-id": {
            "description": "A UID [RFC4122](https://tools.ietf.org/html/rfc4122) used as a correlation ID.  nIf supplied, the transmitter must \"play\" this value in the response header.",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-]{0,99}$",
              "minLength": 1,
              "maxLength": 100,
              "example": "92cac523-d3ae-2289-b106-330a6218710d"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ResponseConsent"
            }
          }
        }
      },
      "204ConsentsConsentIdDeleted": {
        "description": "Consent successfully revoked.",
        "headers": {
          "x-fapi-interaction-id": {
            "description": "A UID [RFC4122](https://tools.ietf.org/html/rfc4122) used as a correlation ID.  nIf supplied, the transmitter must \"play\" this value in the response header.",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-]{0,99}$",
              "minLength": 1,
              "maxLength": 100,
              "example": "85bac523-d3ae-2289-b106-330a6218710d"
            }
          }
        }
      }
    }
  }
}
